from scripts.snakemake_parse import *
import pathlib

configfile: "config.yaml"
cfg = ParsedConfig(config)

wildcard_constraints:
    hvg = "hvg|full_feature"

rule all:
    input:
        cfg.get_filename_pattern("metrics", "final")

rule integration:
    input:
        cfg.get_all_file_patterns("integration")
    message: "Integration done"

rule integration_prepare:
    input:
        adata  = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="file"),
        script = "scripts/runPP.py"
    output:
        join_path(cfg.get_filename_pattern("prepare", "directory_by_setting"), "adata_pre.{prep}")
    message:
        """
        Preparing adata
        wildcards: {wildcards}
        parameters: {params}
        output: {output}
        """
    params:
        batch_key = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="batch_key"),
        hvgs      = lambda wildcards: cfg.get_feature_selection(wildcards.hvg),
        scale     = lambda wildcards: "-s" if wildcards.scaling == "scaled" else "",
        rout      = lambda wildcards: "-r" if wildcards.prep == "RDS" else "",
        seurat    = lambda wildcards: "-l" if wildcards.prep == "RDS" else "",
        cmd       = f"conda run -n {cfg.py_env} python"
    benchmark:
        join_path(cfg.get_filename_pattern("prepare", "directory_by_setting"),
                  "prep_{prep}.benchmark")
    shell:
        """
        {params.cmd} {input.script} -i {input.adata} -o {output} -b {params.batch_key} \
        --hvgs {params.hvgs} {params.scale} {params.rout} {params.seurat}
        """